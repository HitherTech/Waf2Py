#!/usr/bin/env python
# -*- coding: utf-8 -*-

import string
import random
import subprocess
import time
import os
import re
import psutil


def GetNginxPid():
    try:
        nginx_pid = open('/opt/waf/nginx/var/run/nginx.pid','r').read().replace('\n','')
        int(nginx_pid)
    except:
        nginx_pid = None

    return nginx_pid

class Stuffs:
    def __init__(self):
        pass

    def password(self):
        #Generate a random string, 40 chars
        self.chars = string.ascii_letters+ string.digits
        self.pwdSize = 40

        self.result = ''.join((random.choice(self.chars)) for x in range(self.pwdSize))
        return self.result

class Filtro:
    def __init__(self):
        pass
    
    def CheckRule(self, clean):
        self.clean = clean
        #self.isalphanum = self.clean.isalnum()
        try:
            #if no numeric input will throw an error
            int(self.clean)
            if any(c in self.clean for c in "\"/'\;.,=%#$*()[]?¿¡@{}:!|&<>¨~°^ "):
                self.aproved = 'NO'
            elif len(self.clean) <= 10:
                self.aproved = 'YES'
            else:
                self.aproved = 'NO'
        except:
            self.aproved = 'NO'
        return self.aproved
    
    def CheckRuleName(self, clean):
        self.clean = clean
        try:
            #if no numeric input will throw an error
            if any(c in str(self.clean) for c in "\"/'\;,=%#$*()[]?¿¡@{}:!|&<>¨~°^"):
                self.aproved = 'NO'
            else:
                self.aproved = 'YES'
        except:
            self.aproved = 'NO'
        return self.aproved
    
    def CheckStr(self, clean):
        self.clean = clean
        self.isalphanum = self.clean.isalnum()
        if len(self.clean) == 40 and self.isalphanum == True:
            self.aproved = 'YES'

        else:
            self.aproved = 'NO'

        return self.aproved
    
    def CheckStr35(self, clean):
        self.clean = clean
        self.isalphanum = self.clean.isalnum()
        if self.isalphanum == True and (len(self.clean) == 35 or len(self.clean) == 36):
            self.aproved = 'YES'

        else:
            self.aproved = 'NO'

        return self.aproved


    
    def CheckPorts(self, ports):
        self.ports = ports
        if any(c in self.ports for c in "\"/';,%#$*=()[]{}:?¿¡!|&<>¨~°^ ."):
            self.aproved = 'NO'
        if re.search('[a-zA-Z]', self.ports):
            self.aproved = 'NO'
        if len(self.ports) < 2:
            self.aproved = 'NO'
        else:
            self.aproved = 'YES'
            
        
        return self.aproved
    
    def CheckName(self, name):
        self.name = name
        if any(c in self.name for c in "\"\\';,%$*=[]{}?¿¡!|<>¨~°^"):
            self.aproved = 'NO'
        else:
            self.aproved = 'YES'

        return self.aproved

    def CheckPath(self, path):
        self.path = path
        if any(c in self.path for c in "\"\\';,%$*[]{}:|<>¨~°^ "):
            self.aproved = 'NO'
        else:
            self.aproved = 'YES'

        return self.aproved

class Nginx:
    def __init__(self):
        self.nothing = ''

    def SyntaxCheck(self):
        #Debug only
        os.system('echo "SyntaxCheck executed" >> /home/www-data/waf2py_community/applications/Waf2Py/static/logs/debug.log')
        self.process = subprocess.Popen(['sudo', '/opt/waf/nginx/sbin/nginx', '-t'], stdout=subprocess.PIPE,
                                        stderr=subprocess.PIPE)
        self.out, self.err = self.process.communicate()

        if 'test failed' in str(self.err):
            self.response = 'Bad Syntax: ' + str(self.err)
        else:
            self.response = 'OK'
        return self.response
    
    #Reload Nginx
    def Reload(self):
        #Debug only
        os.system('echo "Reload executed" >> /home/www-data/waf2py_community/applications/Waf2Py/static/logs/debug.log')
        self.out, self.err = subprocess.Popen(['sudo', '/opt/waf/nginx/sbin/nginx', '-t'], stdout=subprocess.PIPE,stderr=subprocess.PIPE).communicate()
        if 'syntax is ok' in str(self.err):
            self.response = 'Syntax OK'
        else:
            self.response = 'Bad Syntax: ' + str(self.err)

        if self.response == 'Syntax OK':
            #sometimes a single reload doesn't work as spected... 2 reload to solve this random issue.
            self.out, self.response = subprocess.Popen(['sudo', '/opt/waf/nginx/sbin/nginx', '-s', 'reload'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
            #sometimes a single reload doesn't work as spected... 2 reload to solve this random issue.
            #second reload is performed only if there are no errors on the first reload
            if not self.response:
                time.sleep(1)
                subprocess.Popen(['sudo', '/opt/waf/nginx/sbin/nginx', '-s', 'reload'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                self.response = 'Reload Succesfull'

        return self.response
    
    def Start(self):
        #Debug only
        os.system('echo "start" >> /home/www-data/waf2py_community/applications/Waf2Py/static/logs/debug.log')
        #Check if nginx is running first
        if GetNginxPid() == None:
            #FNULL = open(os.devnull, 'wb')
            #os.system('echo "start" > /home/www-data/waf2py_community/applications/Waf2Py/scripts/.nginx.action')
            cmd = '/usr/bin/nohup /home/www-data/waf2py_community/applications/Waf2Py/scripts/start.sh &'
            subprocess.Popen(cmd, shell=True, stdout=None, stderr=None, preexec_fn=os.setpgrp)
            #subprocess.run('sudo /opt/waf/nginx/sbin/nginx', creationflags='DETACHED_PROCESS | CREATE_NEW_PROCESS_GROUP' ,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            #capture_output=True
            #wait 1 sec
            time.sleep(2)
            self.nginx_pid = GetNginxPid()
            try:
                if psutil.pid_exists(int(self.nginx_pid)):
                    self.response = 'Success, Nginx running'
                else:
                    self.response = 'Failed, I could not start nginx'
            except:
                self.response = 'Failed, I could not start nginx',
            self.response = 'Start signal sent, wait 5 sec to nginx start'

        else:
            self.response = 'Nginx is already running'
        return (self.response)
    
    def Stop(self):
        self.nginx_pid = GetNginxPid()
        if self.nginx_pid:
            if psutil.pid_exists(int(self.nginx_pid)):
                os.system('echo "stop" > /home/www-data/waf2py_community/applications/Waf2Py/scripts/.nginx.action')
                self.out, self.response = subprocess.Popen(['sudo','/opt/waf/nginx/sbin/nginx', '-s', 'stop'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
                self.response = str(self.response, 'utf-8')
            else:
                self.response = 'Nginx is already stopped'
        else:
                self.response = 'Nginx is already stopped'
                
        if not self.response:
            self.response = "Nginx Stopped"

        return self.response

class CreateFiles:
    def __init__(self):
        pass
    
    def CreateModsecRule(self, rules_path, rule_name, body):
        self.rules_path = rules_path
        self.rule_name = rule_name
        self.body = body
        try:
            # Create Modsecurity rule
            self.a = open(self.rules_path + self.rule_name, 'w+')
            self.a.write(self.body)
            self.a.close()
            self.message = 'OK'
        except Exception as e:
            self.message = 'Error: ' + str(e)

        return self.message
    
    def CreateNginxFiles(self, NginxAvailable, AppName, Data):
        self.NginxAvailable = NginxAvailable
        self.AppName = AppName
        self.Data = Data
        try:
            # Create Nginx block Server
            self.a = open(self.NginxAvailable + str(self.AppName) + '_nginx.conf', 'w+')
            self.a.write(Data)
            self.a.close()
            self.message = 'OK'
        except Exception as e:
            self.message = 'Error: ' + str(e)

        return self.message


    def CreateModsecConf(self, appname, data):
        try:
            # Create Modsecurity conf
            a = open('/opt/waf/nginx/etc/modsecurity_conf/' + str(appname) + '_modsec' + '.conf', 'w+')
            a.write(data)
            a.close()
            self.message = 'Ok'

        except Exception as e:
            self.message = 'Error: ' + str(e)


    def CreateModsecFiles(self, PathRules, AppName, PathModConf, Data):
        # create app folder in modsecurity tmp directory
        try:

            os.mkdir(PathRules + str(AppName))
            os.mkdir(PathRules + str(AppName) + '/enabled_rules') 
            os.mkdir(PathRules + str(AppName) + '/rules')

            # Copy core set rules to tmp
            os.system('cp /opt/waf/nginx/etc/crs/owasp-modsecurity-crs/rules/* ' + PathRules + str(AppName) + '/rules/')

            # Copy setup.conf of ruleset to modsec tmp
            os.system('cp /opt/waf/nginx/etc/crs/owasp-modsecurity-crs/crs-setup.conf ' + PathRules + str(AppName)+'/')

            # Create Modsecurity app conf
            a = open(PathModConf + str(AppName) + '_modsec' + '.conf', 'w+')
            a.write(Data)
            a.close()

            self.message = 'OK'

        except Exception as e:
            self.message = 'Error: ' + str(e)

        return self.message

    def CreateRules(self, PathRules, AppName):

        # Create symlinks from base_rules to enabled rules
        try:
            os.system('ls ' + PathRules + str(AppName) + '/rules/ | while read i; do cp '
                      + PathRules + str(AppName) + '/rules/$i ' + PathRules + str(AppName)
                      + '/enabled_rules/;done')
            
            self.message = 'OK'

        except Exception as e:
            self.message = 'Error: ' + str(e)

        return self.message

    def CreateBackend(self, AppName, IpPool, vhost_id, max_fails, fail_timeout, plbsid_id, scheme):
        #custom_id = random.randint(0, 999999)
        try:
            # Create backend conf
            f = open('/opt/waf/nginx/etc/backend/%s.conf' %(AppName), 'a')
            f.writelines('upstream backend_%s_%s%s {\n' %(vhost_id, str(plbsid_id), scheme))
            for ip in IpPool.splitlines():
                if ip != "":
                    f.writelines('    server %s max_fails=%s fail_timeout=%s;' %(ip, str(max_fails), str(fail_timeout)))
                    f.writelines('\n')
                else:
                    pass
            f.writelines('}\n')
            f.close()
            self.message = 'Backend Saved'
        except Exception as e:
            self.message = 'Error: ' + str(e)

        return self.message

class Maintenance:
    
    def __init__(self):
        pass
    
    def LogRotationFile(self, app_name):
        self.app_name = app_name
        logs_files = "/opt/waf/nginx/var/log/"+self.app_name+"/*.log {\n\
        create 0644 www-data www-data\n\
        daily\n\
        rotate 10\n\
        missingok\n\
        notifempty\n\
        compress\n\
        sharedscripts\n\
        copytruncate\n\
        #postrotate\n\
        #/bin/kill -USR1 `cat /opt/waf/nginx/var/run/nginx.pid 2>/dev/null` 2>/dev/null || true\n\
        #endscript\n\
        /bin/chown -R www-data.www-data /opt/waf/nginx/var/log/"+self.app_name+"/ || true\n\
        }"
        
        #Create log rotation for every app.
        os.system('sudo chown www-data.www-data /home/www-data/waf2py_community/applications/Waf2Py/logrotation.d/*')
        f = open('/home/www-data/waf2py_community/applications/Waf2Py/logrotation.d/%s.conf' %(self.app_name),'w') 
        f.write(logs_files)
        f.close()
        os.system('sudo chown root.root /home/www-data/waf2py_community/applications/Waf2Py/logrotation.d/*')
        return 'ok'
